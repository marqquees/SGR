@using SGR.Helper
@using SGR.Model
@using SGR.Service

@inject EquipmentOperation Operation

<div class="card mb-4">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h6 class="mb-0">
            Equipamentos Registrados
        </h6>

        <div>
            <input type="text" class="form-control" placeholder="pesquisar..."
            @bind-value="_searchTerm" @bind-value:event="oninput" @onkeyup="FilterEquipment" />
        </div>
    </div>

    <div class="card-body">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Data de Registro</th>
                    <th>Cliente</th>
                    <th>Utilizador</th>
                    <th>Categoria</th>
                    <th>Marca</th>
                    <th>Estado</th>
                    <th>Responsável</th>
                    <th>Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var equipment in _filteredEquipment)
                {
                    <tr class="align-middle">
                        <td>@equipment.DateRegister</td>
                        <td>@equipment.Customer</td>
                        <td>@equipment.User</td>
                        <td>@equipment.Category</td>
                        <td>@equipment.Brand</td>
                        <td>
                            <span class="badge @EquipmentUi.GetStateBadgeClass(equipment.State!)">
                                @equipment.State
                            </span>
                        </td>
                        <td>@equipment.Responsible</td>
                        <td>
                            <a href="/edit-equipment/@equipment.Id" class="btn btn-info btn-sm me-2">
                                Editar
                            </a>

                            <button type="button" class="btn btn-danger btn-sm me-2" @onclick="() => Delete.InvokeAsync(equipment)">
                                Remover
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="card-footer">
        <small class="text-muted">@_filteredEquipment.Count de @_equipment.Count registos.</small>
    </div>
</div>

@code {
    [Parameter] public List<Equipment> Equipment { get; set; } = [];
    [Parameter] public EventCallback<Equipment> Delete { get; set; }

    private List<Equipment> _equipment = [];
    private List<Equipment> _filteredEquipment = [];
    private string _searchTerm = string.Empty;

    /// <summary>
    /// Método executado quando os parametros do componente são atualizados.
    /// </summary>
    protected override void OnParametersSet()
    {
        _equipment = Equipment;
        FilterEquipment();
    }

    /// <summary>
    /// Filtra os itens utilizando o serviço centralizado de filtragem.
    /// </summary>
    private void FilterEquipment()
    {
        _filteredEquipment = Operation.FilterEquipmentList(_searchTerm, _equipment);
    }
}