@using SGR.Helper
@using SGR.Models
@using SGR.Service

@inject OperationService Operation

<div class="card mb-4">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            Equipamentos Registrados
            <span class="badge bg-light text-primary ms-2">@_filteredEquipment.Count</span>
        </h5>
        <div>
            <input type="text" class="form-control form-control-sm" placeholder="pesquisar..."
                @bind-value="_searchTerm" @bind-value:event="oninput" @onkeyup="() => FilterItems()" />
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Data de Registro</th>
                        <th>Cliente</th>
                        <th>Utilizador</th>
                        <th>Categoria</th>
                        <th>Marca</th>
                        <th>Modelo</th>
                        <th>Estado</th>
                        <th>Responsável</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _filteredEquipment)
                    {
                        <tr class="align-middle">
                            <td>@item.Id</td>
                            <td>@item.DateRegister</td>
                            <td>@item.Customer</td>
                            <td>@item.User</td>
                            <td>@item.Category</td>
                            <td>@item.Brand</td>
                            <td>@item.Model</td>
                            <td>
                                <span class="badge @HistoryUi.GetStateBadgeClass(@item.State)">
                                    @item.State
                                </span>
                            </td>
                            <td>@item.Responsible</td>
                            <td>
                                <button class="fw-bold btn btn-info me-1" @onclick="() => OnItemSelected.InvokeAsync(item)">
                                    Detalhes
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="card-footer">
        <small class="text-muted">@_filteredEquipment.Count de @_equipment.Count registos.</small>
    </div>
</div>

@code {
    /// <summary>
    /// Lista de equipamentos a serem exibidos na tabela.
    /// </summary>
    [Parameter] public List<Equipment> Equipment { get; set; } = [];
    
    /// <summary>
    /// Callback invocado quando um item é selecionado para visualizção de detalhes.
    /// </summary>
    [Parameter] public EventCallback<Equipment> OnItemSelected { get; set; }

    private List<Equipment> _equipment = [];
    private List<Equipment> _filteredEquipment = [];
    private string _searchTerm = string.Empty;

    /// <summary>
    /// Método executado quando os parametros do componente são atualizados.
    /// </summary>
    protected override void OnParametersSet()
    {
        _equipment = Equipment;
        FilterItems();
    }

    /// <summary>
    /// Filtra os itens utilizando o serviço centralizado de filtragem.
    /// </summary>
    private void FilterItems()
    {
        _filteredEquipment = Operation.FilterHistory(_searchTerm, _equipment);
    }
}