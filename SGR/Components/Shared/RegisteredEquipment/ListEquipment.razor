@using Microsoft.AspNetCore.Components.QuickGrid
@using SGR.Helper
@using SGR.Model
@using SGR.Service

@inject EquipmentOperation Operation

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-11 col-xl-12">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">
                        Equipamentos Registrados
                    </h6>

                    <div>
                        <input type="text" 
                            class="form-control" 
                            placeholder="pesquisar..."
                            @bind-value="_searchTerm" 
                            @bind-value:event="oninput" 
                            @onkeyup="FilterEquipment" />
                    </div>
                </div>

                <div class="card-body">
                    <QuickGrid Items="_filteredEquipment.AsQueryable()" Class="table table-hover">
                        <PropertyColumn Property="@(e => e.Customer)" Title="Cliente" />
                        <PropertyColumn Property="@(e => e.Category)" Title="Categoria"/>
                        <PropertyColumn Property="@(e => e.Manufacturer)" Title="Fabricante" />
                        <PropertyColumn Property="@(e => e.Processor)" Title="Processador" />
                        <PropertyColumn Property="@(e => e.MemoryRAM)" Title="Memória RAM" />
                        <PropertyColumn Property="@(e => e.SerialNumber)" Title="Número de Série" />

                        <TemplateColumn Title="Estado">
                            <span class="badge @EquipmentUi.GetStateBadgeClass(context.State!)">
                                @context.State
                            </span>
                        </TemplateColumn>

                        <PropertyColumn Property="@(e => e.Responsible)" Title="Responsável" />

                        <TemplateColumn Title="Ações">
                            <a href="/editar-equipamento/@context.Id" class="btn btn-info btn-sm me-2">
                                Editar
                            </a>
                            <button type="button" class="btn btn-danger btn-sm me-2" @onclick="() => Delete.InvokeAsync(context)">
                                Remover
                            </button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>

                <div class="card-footer">
                    <small class="text-muted">@_filteredEquipment.Count de @_equipmentList.Count registos.</small>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<Equipment> Equipment { get; set; } = [];
    [Parameter] public EventCallback<Equipment> Delete { get; set; }

    private List<Equipment> _equipmentList = [];
    private List<Equipment> _filteredEquipment = [];
    private string _searchTerm = string.Empty;

    /// <summary>
    /// Método executado quando os parâmetros do componente são atualizados.
    /// </summary>
    protected override void OnParametersSet()
    {
        _equipmentList = Equipment;
        FilterEquipment();
    }

    /// <summary>
    /// Filtra os itens utilizando o serviço centralizado de filtragem.
    /// </summary>
    private void FilterEquipment()
    {
        _filteredEquipment = Operation.FilterEquipment(_searchTerm, _equipmentList);
    }
}