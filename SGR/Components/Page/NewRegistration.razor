@page "/new-registration"
@rendermode InteractiveServer

@using SGR.Models
@using SGR.Service
@using SGR.Components.Shared.NewRegistration

@inject OperationService Operation

<PageTitle>Novo Registo</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-11 col-xl-12">
            <EditForm Model="@_equipment" OnValidSubmit="AddEquipment" FormName="newRegistrationForm" class="needs-validation">
                <DataAnnotationsValidator />

                <Form Equipment="_equipment" />

                <div class="card-body">
                    <div class="d-flex gap-2 justify-content-end">
                        <button type="button" class="btn btn-outline-secondary" @onclick="ClearForm">
                            <i class="bi bi-x-circle"></i> Limpar
                        </button>

                        <button type="submit" class="btn btn-primary">
                            @if (_isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                <span>Salvando...</span>
                            }
                            else
                            {
                                <i class="bi bi-check-circle"></i>
                            
                                <span>Salvar</span>
                            }
                        </button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
   
    @if (_showMessage)
    {
        <MessageModal IsSuccess="@_isSuccess" Message="@_message" OnClose="@CloseMessageModal" />
    }
</div>

@code {
    private Equipment _equipment = new();
    private string? _message;
    private bool _isSuccess;
    private bool _isLoading;
    private bool _showMessage;

    /// <summary>
    /// Método responsável por adicionar um novo equipamento.
    /// </summary>
    private async Task AddEquipment()
    {
        try
        {
            _isLoading = true;
            
            // Salvar o inventário.
            bool result = await Operation.SaveEquipmentAsync(_equipment);
            
            if (result)
            {
                _isSuccess = true;
                _message = "Equipamento adicionado com sucesso!";
            }
            else
            {
                _isSuccess = false;
                _message = "Não foi possível salvar o equipamento. Verifique os dados e tente novamente.";
            }
        }
        catch (Exception ex)
        {
            _isSuccess = false;
            _message = ex.InnerException != null 
                ? $"Erro ao salvar: {ex.InnerException.Message}" 
                : $"Erro ao salvar: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            // Mostrar o modal com a mensagem.
            _showMessage = true;

            StateHasChanged();
        }
    }

    /// <summary>
    /// Método responsável por limpar o formulário.
    /// </summary>
    private void ClearForm()
    {
        _equipment = new Equipment();
        _message = string.Empty;
        _isSuccess = false;
        _showMessage = false;

        StateHasChanged();
        OnInitialized();
    }

    /// <summary>
    /// Método responsável por fechar o modal de mensagem.
    /// </summary>
    private void CloseMessageModal()
    {
        _showMessage = false;
        StateHasChanged();
    }
}
